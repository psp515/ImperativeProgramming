// 5.3
// Matrix triangulation, determinant calculation, and Ax = b solving - extended version
// (Swap the rows so that the row with the largest, leftmost nonzero entry is on top. While
// swapping the rows use index vector - do not copy entire rows.)
// If max A[i][i] < eps, function returns 0.
// If det != 0 && b != NULL && x != NULL then vector x should contain solution of Ax = b.

double gauss(double A[][SIZE], const double b[], double x[], const int n, const double eps){
    int indeks[n];
    for(int i = 0; i < n; i++){// Indeks przechowuje informację o kolejności wierszy
        indeks[i] = i;
    }
    //Przepisanie stałych z b do x

    for (int i = 0; i < n; ++i) {
        x[i] = b[i];
    }

    double product = 1;
    for(int i = 0; i < n - 1; i++){ // Czy do ostatniego elementu?
        double maks = 0;
        int actual_indeks = 0;
        for(int j = i; j < n; j++){
            if (fabs(A[indeks[j]][i]) > maks){

                maks = fabs(A[indeks[j]][i]);
                actual_indeks = j;
            }
        }
        //Podmiana
        if(i != actual_indeks) product *= -1; //Zamiana wierszy powoduję zmianę znaku wyznacznika
        int tmp = indeks[i];
        indeks[i] = indeks[actual_indeks];
        indeks[actual_indeks] = tmp;

        double tmp2 = x[i];
        x[i] = x[actual_indeks];
        x[actual_indeks] = tmp2;

//        printf("\n\n\n");
//        printf("%d-ty raz %lf:\n",i, fabs(A[indeks[i]][i]));

        if(fabs(A[indeks[i]][i]) < eps) return NAN;

        //Zerowanie
        for(int j = i + 1; j < n; j++){
            double mnoznik = A[indeks[j]][i] / A[indeks[i]][i];
            x[j] -= (mnoznik * x[i]);
            for(int k = i; k < n; k++){
                A[indeks[j]][k] -= (A[indeks[i]][k] * mnoznik);
            }
        }
//        for(int k = 0; k < n; k++){
//            for(int l = 0; l < n; l++){
//                printf("%lf ", A[indeks[k]][l]);
//            }
//            printf("\n");
//        }
    }

    for(int i = 0; i < n; i++){
        product *= A[indeks[i]][i];
    }

    if(product != 0){
        for(int i = n - 1; i >=0; i--){
            for(int j = n - 1; j > i; j--){
                x[i] -= (A[indeks[i]][j] * x[j]);
            }
            x[i] = x[i] / A[indeks[i]][i];
        }
    }

    return product;
}

// 5.4
// Returns the determinant; B contains the inverse of A (if det(A) != 0)
// If max A[i][i] < eps, function returns 0.
double matrix_inv(double A[][SIZE], double B[][SIZE], int n, double eps){
    double tmp[SIZE][SIZE];
    int indeks[n];

    for(int i = 0 ; i < n; i++){
        for(int j = 0; j < n; j++){
            tmp[i][j] = A[i][j];
        }
    }
    for(int i = 0; i < n; i++){// Indeks przechowuje informację o kolejności wierszy
        indeks[i] = i;
    }

    //Wyznacznik z zadania wyżej
    double product = 1;
    for(int i = 0; i < n - 1; i++) { // Czy do ostatniego elementu?
        double maks = 0;
        int actual_indeks = 0;
        for (int j = i; j < n; j++) {
            if (fabs(tmp[indeks[j]][i]) > maks) {

                maks = fabs(tmp[indeks[j]][i]);
                actual_indeks = j;
            }
        }

        if (i != actual_indeks) product *= -1; //Zamiana wierszy powoduję zmianę znaku wyznacznika
        int tmp2 = indeks[i];
        indeks[i] = indeks[actual_indeks];
        indeks[actual_indeks] = tmp2;

        if (fabs(tmp[indeks[i]][i]) < eps) return NAN;

        //Zerowanie
        for (int j = i + 1; j < n; j++) {
            double mnoznik = tmp[indeks[j]][i] / tmp[indeks[i]][i];

            for (int k = i; k < n; k++) {
                tmp[indeks[j]][k] -= (tmp[indeks[i]][k] * mnoznik);
            }
        }
    }
    for(int i = 0; i < n; i++){
        product *= tmp[indeks[i]][i];
    }

    //Tworzenie macierzy jednoskowej

    for(int i = 0 ; i < n; i++){
        B[i][i] = 1;
    }

    for(int i = 0; i<n; i++){
        double divide = A[i][i];
        for(int j = 0; j < n; j++){
            A[i][j] = A[i][j] / divide;
            B[i][j] = B[i][j] / divide;
        }

        for(int a = 0; a < n; a++){
            if(a != i) {

                double diff = A[a][i];

                for (int b = 0; b < n; b++) {
                    A[a][b] -= (diff * A[i][b]);
                    B[a][b] -= (diff * B[i][b]);
                }
            }
        }
    }
    return product;
}

